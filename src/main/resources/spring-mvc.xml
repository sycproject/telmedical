<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
    http://www.springframework.org/schema/mvc   
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- Spring MVC配置 -->
    
    <!-- 默认的注解映射的支持 -->
    <context:annotation-config />
    <!-- 扫描注解包（如果在和spring集成的时候，也会扫描@service类，所以在此处应该排除扫描@service类） -->
    <context:component-scan base-package="com.bsc.controller" >
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>
    <!--默认的mvc注解映射的支持（相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean） -->
    <mvc:annotation-driven/>


	<!-- 必须配置在 spring Mvc中，依赖DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter-->
	<context:component-scan base-package="com.bsc.apidoc" />
	<!-- <bean id="swaggerConfig" class="com.bsc.apidoc.SwaggerConfig"></bean> -->
	
	
	<!-- Spring AOP对action做日志管理 -->
	<!-- <bean id="actionLog" class="com.bsc.aop.ActionLog"></bean>
	<aop:config>
		<aop:aspect id="action" ref="actionLog">调用日志类
			<aop:pointcut id="logAction" expression="execution(* com.bsc.controller.*.*(..))" />配置在controller包下所有的类在调用之前都会被拦截
			<aop:around pointcut-ref="logAction" method="around"/>
			<aop:before pointcut-ref="logAction" method="before" />在controller包下面所有的类的所有方法被调用之前都调用MyLog中的before方法
			<aop:after pointcut-ref="logAction" method="after" />在controller包下面所有的类的所有方法被调用之前都调用MyLog中的after方法
		</aop:aspect>
	</aop:config> -->
	
	
	<!-- aop 的配置 --> 
	<!-- 启动对@AspectJ注解的支持  --> 
  	<aop:aspectj-autoproxy proxy-target-class="true" />
  	<!-- <bean id="logService" class="com.bsc.aop.SysLogAOP"></bean>  -->
    
    
    
    
    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
            <property name="cacheSeconds" value="0" />
            <property name="useExpiresHeader" value="true" />
            <property name="useCacheControlHeader" value="true" />
            <property name="useCacheControlNoStore" value="true" />
            <property name="alwaysUseFullPath" value="true" />
        </bean>
    </mvc:interceptors>

    <!-- 视图解析器和json解析器(多视图解析器) -->
    
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	
    	<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
        <property name="defaultContentType" value="text/html" />
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <!-- 配置试图解析器（ViewResolver）：前缀+逻辑名+后缀：/WEB-INF/pages/pages/home.jsp -->
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/WEB-INF/views/" /> <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
                    <property name="suffix" value=".jsp"/>
                    <property name="order" value="1" />
                    <property name="contentType" value="text/html;charset=UTF-8"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
            </list>
        </property>
    </bean>
    
    <!-- 多视图解析 .json .xml -->
    <!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        用于开启 /userinfo/123?format=json 的支持 默认是true
        <property name="favorParameter" value="false" />
        用于关闭 /userinfo/123.json 的支持 默认是true
        <property name="favorPathExtension" value="true" />
        设置为true以忽略对Accept Header的支持
        <property name="ignoreAcceptHeader" value="true" />
        在没有扩展名时即: "/user/1" 时的默认展现形式
        <property name="defaultContentType" value="text/html" />
        扩展名至mimeType的映射,即 /user.json => application/json
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
            </map>
        </property>
        <property name="defaultViews">
            <list>
              <ref bean="jsonView" />
              <ref bean="xmlViewer" />
            </list>
        </property>
    </bean> -->
    
    
    <!-- 设置freeMarker的配置文件路径 -->
    <!-- <bean id="freemarkerConfiguration"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:freemarker.properties" />
    </bean> -->
 
    <!-- 配置freeMarker的模板路径 -->
    <!-- <bean id="freemarkerConfig"
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="freemarkerSettings" ref="freemarkerConfiguration" />
        <property name="templateLoaderPath">
            <value>/</value>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
            </map>
        </property>
    </bean> -->
 
    <!-- <bean id="freeMarkerView"
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="order" value="2" />
        <property name="viewClass"
            value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
        <property name="prefix" value="WEB-INF/ftl/pages/" />
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html; charset=utf-8" />
    </bean> -->
    
    <!-- 配置json解析器 -->
    <!-- <bean name="jsonView"
        class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
        <property name="encoding">
            <value type="org.codehaus.jackson.JsonEncoding">UTF8</value>
        </property>
        <property name="extractValueFromSingleKeyModel" value="true"></property>
        <property name="contentType" value="application/json;charset=UTF-8" />
    </bean> -->
    
    <!-- 配置xml视图解析器 -->
    <!-- <bean id="xmlViewer"
        class="org.springframework.web.servlet.view.xml.MarshallingView">
        <constructor-arg>
          <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
            <property name="classesToBeBound">
                <list>
                </list>
            </property>
          </bean>
        </constructor-arg>
        <property name="contentType" value="application/xml;charset=UTF-8" />
    </bean> -->
    
    <!-- 文件上传解析器 -->  
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--1024**1024*5即5M(如果value=-1,表示不限制大小)-->
        <property name="maxUploadSize" value="5242880"/>
    </bean>
    

    <!-- 总错误处理 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="defaultErrorView">
            <value>/error/error</value>
        </property>
        <property name="defaultStatusCode">
            <value>500</value>
        </property>
        <!-- 全局异常记录到日志中，在log4j的配置文件中还要加入log4j.logger.org.springframework.web.servlet.handler.SimpleMappingExceptionResolver=WARN -->
        <property name="warnLogCategory">
            <value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
        </property>
        <property name="exceptionMappings">
            <props>
                <!-- 映射目录为/WEB-INF/views/error/upload_error.jsp -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error/upload_error</prop>
            </props>
        </property>
    </bean>

	<mvc:view-controller path="/" view-name="redirect:/sys/index" />

	<!-- 默认的处理器进行处理（静态资源因为没有相应的Controller就会被default servlet处理） -->
	<mvc:default-servlet-handler/>
    <!-- 对静态资源文件的访问 -->
    <mvc:resources mapping="/images/**" location="/static/images/" cache-period="31556926" />
    <mvc:resources mapping="/js/**" location="/static/js/" cache-period="31556926" />
    <mvc:resources mapping="/css/**" location="/static/css/" cache-period="31556926" />

   
</beans>